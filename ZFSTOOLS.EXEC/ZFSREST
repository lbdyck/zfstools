/* --------------------  rexx procedure  -------------------- *
 * Name:      zfsrest                                         *
 *                                                            *
 * Function:  Restore a zFS dataset from aIDCAMS REPRO        *
 *            unload/backup.                                  *
 *                                                            *
 * Syntax:    %zfsrest                                        *
 *                                                            *
 * Author:    Lionel B. Dyck                                  *
 *                                                            *
 * History:                                                   *
 *            11/02/24 - Change test for existing zfs to      *
 *                       use listdsi                          *
 *            05/19/16 - Support GDG                          *
 *            05/13/16 - Creation                             *
 *                                                            *
 * ---------------------------------------------------------- */

 Address ISPExec
 do forever
    "Display Panel(zfsrest)"
    if rc > 4 then exit 0
    sunload = zfsunlod
    call do_it
    zfsunlod = sunload
    Address ISPExec
    end

Do_It:
/* --------------------------------------------- *
 * Test for GDG and get full dsname if requested *
 * --------------------------------------------- */
 if pos('(',zfsunlod) > 0 then do
    parse value zfsunlod with gdgdsn'('gdg')'.
    if datatype(gdg) = 'NUM' then call get_gdg
    /* if not NUM then must be a PDS member */
    if gdgdsn = '' then return
    zfsunlod = gdgdsn
    end
/* --------------------------------------------- *
 * Validate the source and target dataset status *
 * --------------------------------------------- */
 if sysdsn(zfsunlod) /= "OK" then do
    zedsmsg = ''
    zedlmsg = 'Error:' zfsunlod sysdsn(zfsunlod)
    "Setmsg msg(isrz001)"
    return
    end
 if zreplace /= 'Y' then do
    x = listdsi(zfsdsn)
    if x > 17 then do
       zedsmsg = ''
       zedlmsg = 'Error:' zfsdsn ,
                 "already exists and replace was not specified"
       "Setmsg msg(isrz001)"
       return
       end
    end

 Address TSO
/* ----------------------------------------------- *
 * Get space allocation info for the unload target *
 * ----------------------------------------------- */
 call listdsi zfsunlod
 sprim = sysprimary
 ssec  = sysseconds
 stype = sysunits

/* ------------------------------------------------------ *
 * test for zreplace and if the target zFS dataset exists *
 * ------------------------------------------------------ */
 if sysdsn(zfsdsn) = 'OK' then
    if zreplace = 'Y' then do
       call outtrap 't.'
       "Delete" zfsdsn
       call outtrap 'off'
       end

/* -------------------------------------------------- *
 * Define the zFS dataset if it doesn't already exist *
 * -------------------------------------------------- */
 if left(stype,1) = 'C' then stype = "CYLINDERS"
 if left(stype,1) = 'T' then stype = "TRACKS"
 call outtrap 't.'
 "Define Cluster (Name("zfsdsn") Linear" ,
    stype"("sprim","ssec") volumes("sysvolume")"
 call outtrap 'off'

/* ----------------------------- *
 * Call REPRO to restore the zFS *
 * ----------------------------- */
 call outtrap 't.'
 "Repro indataset("zfsunlod") outdataset("zfsdsn")"
 reprc = rc
 call outtrap 'off'
 zedsmsg = ''
 zedlmsg = left("Repro completed with a return code of:" reprc ,72) ,
            t.1
 Address ISPExec "Setmsg msg(isrz001)"

 return

/* ---------------------------------------- *
 * Get the requested full dsname of the GDG *
 * ---------------------------------------- */
 Get_GDG:
 Address TSO
  if left(gdgdsn,1) = "'" then gdgdsn = gdgdsn"'"
  call outtrap 'c.'
  "Listc Ent("gdgdsn")"
  call outtrap 'off'
  gens = ''
  type = ''
  do i = 1 to c.0
     if word(c.i,1) = "NONVSAM" then do
        cdsn = word(c.i,words(c.i))
        cdsn = translate(cdsn,' ','.')
        parse value word(cdsn,words(cdsn)) with ."G"gen"V"version
        g.gen = version
        gens = gens gen
        end
     end
 /* test for fifo or lifo gdg listing */
 if word(gens,1) < word(gens,2) then do
    gens = reverse(gens)
    ngens = ''
    do i = 1 to words(gens)
       ngens = ngens reverse(word(gens,i))
       end
    gens = ngens
    end
 if left(gdg,1) = '-' then gdg = right(gdg,length(gdg)-1)
 gdg = gdg + 1
 if gdg > words(gens) then do
    zedsmsg = ''
    zedlmsg = 'Error: Invalid GDG generation requested'
    Address ISPExec
    "Setmsg msg(isrz001)"
    gdgdsn = ''
    return
    end
 newgen = word(gens,gdg)
 if left(gdgdsn,1) = "'" then newdsn = substr(gdgdsn,2,length(gdgdsn)-2)
                         else newdsn = gdgdsn
 newdsn = newdsn".G"right(newgen+10000,4)"V"g.newgen
 if left(gdgdsn,1) = "'" then gdgdsn = "'"newdsn"'"
                         else gdgdsn = newdsn
 Address ISPExec
 return
